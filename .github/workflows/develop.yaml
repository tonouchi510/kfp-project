name: develop

on:
  push:
    branches-ignore:
      - main

env:
  GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  PIPELINE_ROOT: ${{ secrets.PIPELINE_ROOT }}
  GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
  VERTEX_SERVICE_ACCOUNT_NAME: ${{ secrets.VERTEX_SERVICE_ACCOUNT_NAME }}
  GOOGLE_APPLICATION_CREDENTIALS: "searvice-account.json"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      
      - name: Setup Authentication with gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: 'x64'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry env use python3.9
          poetry install
      
      - name: Run test
        run: poetry run echo "skip" #python3 -m tests.main
      
  build-docker-image-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      
      - name: Fetch the repository
        run: git fetch
      
      - name: Setup Authentication with gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Configure docker to use the gcloud cli
        run: gcloud auth configure-docker --quiet
      
      - name: Build & push pipeline images
        run: |
          cat .github/workflows/build-targets.txt | while read target
          do
            if [ "${target:0:1}" != "#" ]; then
              if [ "${target:0:9}" != "pipelines" ]; then
                # base or components フォルダのイメージのビルド
                component_name=${target//components\//}
                component_name=${component_name//base\//}
                component_name=${component_name//\//-}
                IMAGE_NAME=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${component_name}
                echo "**********************************************"
                echo "Docker Build & Push $IMAGE_NAME:${GITHUB_SHA::7}"
                echo "**********************************************"
                docker build -f $target/Dockerfile -t $IMAGE_NAME:${GITHUB_SHA::7} .
                docker tag $IMAGE_NAME:${GITHUB_SHA::7} $IMAGE_NAME:latest
                docker push $IMAGE_NAME:${GITHUB_SHA::7}
                docker push $IMAGE_NAME:latest
                docker rmi -f $IMAGE_NAME
              else
                # pipeline componentのビルド
                find ${target}/* -type d | while read component_dir
                do
                  component_name=${component_dir//pipelines\//}
                  component_name=${component_name//\//-}
                  IMAGE_NAME=gcr.io/${{ secrets.GCP_PROJECT_ID }}/${component_name}
                  echo "**********************************************"
                  echo "Docker Build & Push $IMAGE_NAME:${GITHUB_SHA::7}"
                  echo "**********************************************"
                  docker build -f $component_dir/Dockerfile -t $IMAGE_NAME:${GITHUB_SHA::7} .
                  docker tag $IMAGE_NAME:${GITHUB_SHA::7} $IMAGE_NAME:latest
                  docker push $IMAGE_NAME:${GITHUB_SHA::7}
                  docker push $IMAGE_NAME:latest
                  docker rmi -f $IMAGE_NAME
                done
              fi
            fi
          done

  compile-pipeline-and-submit:
    needs: build-docker-image-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      
      - name: Fetch the repository
        run: git fetch
      
      - name: Setup Authentication with gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: 'x64'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry env use python3.9
          poetry install
      
      - name: Update component specs
        run: |
          echo "**********************************************"
          echo "Update component image_tag to ${GITHUB_SHA::7}"
          echo "**********************************************"
          poetry run python .github/workflows/helper.py update-specs --image_tag "${GITHUB_SHA::7}"
      
      - name: Compile and upload pipeline
        run: |
          cat .github/workflows/build-targets.txt | while read target
          do
            if [ "${target:0:9}" = "pipelines" ]; then
              pipeline_file=$(ls ${target}/*-pipeline.py)
              echo "**********************************************"
              echo "Compile $pipeline_file"
              echo "**********************************************"
              poetry run python ${pipeline_file}

              echo "**********************************************"
              echo "Upload $pipeline_file to gcs"
              echo "**********************************************"
              pipeline_name=$(basename $pipeline_file .py)
              echo ${pipeline_name}.json
              echo {{ secrets.PIPELINE_ROOT }}/${GITHUB_SHA::7}/
              gsutil cp ${pipeline_name}.json ${PIPELINE_ROOT}/${GITHUB_SHA::7}/
            fi
          done

      - name: Run pipeline
        run: |
          echo $GCP_SERVICE_ACCOUNT_KEY > service-account.json
          cat .github/workflows/build-targets.txt | while read target
          do
            if [ "${target:0:9}" = "pipelines" ]; then
              echo "**********************************************"
              echo "Run $target"
              echo "**********************************************"
              pipeline_name=$(basename $target .tar.gz)
              package_name=${pipeline_name}.json
              poetry run python .github/workflows/helper.py run-pipeline \
                --package_path "$package_name" --pipeline_name "$pipeline_name" \
                --github_sha "$GITHUB_SHA" --debug
            fi
          done
