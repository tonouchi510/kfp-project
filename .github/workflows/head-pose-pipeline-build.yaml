name: head-pose-pipeline-build

on:
  push:
    branches:
      - main
    paths:
      - "pipelines/head-pose-pipeline/**/*"
      - ".github/workflows/head-pose-pipeline-build.yaml"
  pull_request:
    branches:
      - main
    paths:
      - "pipelines/head-pose-pipeline/**/*"
      - ".github/workflows/head-pose-pipeline-build.yaml"

env:
  GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}
  PIPELINE_ROOT: ${{ secrets.PIPELINE_ROOT }}
  GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
  VERTEX_SERVICE_ACCOUNT_NAME: ${{ secrets.VERTEX_SERVICE_ACCOUNT_NAME }}
  GOOGLE_APPLICATION_CREDENTIALS: "searvice-account.json"
  PIPELINE_NAME: "head-pose-pipeline"

jobs:
  test:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      
      - name: Setup Authentication with gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: 'x64'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry env use python3.9
          poetry install
      
      - name: Run test
        run: poetry run echo "skip" #python3 -m tests.main
      
  build-docker-image-and-push:
    needs: test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      
      - name: Setup Authentication with gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Configure docker to use the gcloud cli
        run: gcloud auth configure-docker --quiet
      
      - name: Set docker build params
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            docker_tag=pr-${{ github.event.number }}-${GITHUB_SHA}
          else
            docker_tag=${GITHUB_SHA}
          fi
          echo "DOCKER_TAG=${docker_tag}" >>$GITHUB_ENV
        
      - name: Build and push training component
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          file: ./pipelines/${{ env.PIPELINE_NAME }}/training/Dockerfile
          push: true
          tags: |
            gcr.io/${{ env.GCP_PROJECT }}/${{ env.PIPELINE_NAME }}-training:${{ env.DOCKER_TAG }}
          cache-from: |
            gcr.io/${{ env.GCP_PROJECT }}/${{ env.PIPELINE_NAME }}-training:${{ env.DOCKER_TAG }}
            gcr.io/${{ env.GCP_PROJECT }}/${{ env.PIPELINE_NAME }}-training:latest
          cache-to: type=inline
      
  compile-pipeline-and-run:
    needs: build-docker-image-and-push
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      
      - name: Setup Authentication with gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ env.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: 'x64'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry env use python3.9
          poetry install
      
      - name: Set docker build params
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            docker_tag=pr-${{ github.event.number }}-${GITHUB_SHA}
          else
            docker_tag=${GITHUB_SHA}
          fi
          echo "DOCKER_TAG=${docker_tag}" >>$GITHUB_ENV
      
      - name: Update component specs
        run: |
          echo "**********************************************"
          echo "Update component image_tag to ${{ env.DOCKER_TAG }}"
          echo "**********************************************"
          poetry run python .github/workflows/helper.py update-specs \
            --target_dir "pipelines/${{ env.PIPELINE_NAME }}" --image_tag "${{ env.DOCKER_TAG }}"
      
      - name: Compile pipeline
        run: |
          pipeline_file=pipelines/${{ env.PIPELINE_NAME }}/${{ env.PIPELINE_NAME }}.py
          echo "**********************************************"
          echo "Compile ${pipeline_file}"
          echo "**********************************************"
          poetry run python ${pipeline_file}
          echo "**********************************************"
          echo "Upload ${{ env.PIPELINE_NAME }}.json to ${{ env.PIPELINE_ROOT }}"
          echo "**********************************************"
          gsutil cp ${{ env.PIPELINE_NAME }}.json ${{ env.PIPELINE_ROOT }}/${{ env.DOCKER_TAG }}/

      - name: Run pipeline
        run: |
          echo $GCP_SERVICE_ACCOUNT_KEY > service-account.json
          echo "**********************************************"
          echo "Run ${{ env.PIPELINE_NAME }}.json"
          echo "**********************************************"
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            poetry run python .github/workflows/helper.py run-pipeline \
              --package_path "${{ env.PIPELINE_NAME }}.json" --pipeline_name "${{ env.PIPELINE_NAME }}" \
              --version "${{ env.DOCKER_TAG }}" --debug
          else
            poetry run python .github/workflows/helper.py run-pipeline \
              --package_path "${{ env.PIPELINE_NAME }}.json" --pipeline_name "${{ env.PIPELINE_NAME }}" \
              --version "${{ env.DOCKER_TAG }}"
          fi
