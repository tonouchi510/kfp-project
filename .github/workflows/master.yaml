name: master

on: 
  push:
    branches:
      - master

env:
  GCP_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
  GCP_REGION: ${{ secrets.GCP_REGION }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      
      - name: Setup Authentication with gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.7
          architecture: 'x64'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry env use python3.9
          poetry install
      
      - name: Run test
        run: poetry run echo "skip" #python3 -m tests.main
   
  build-and-submit-pipeline:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      
      - name: Setup Authentication with gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          architecture: 'x64'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry env use python3.9
          poetry install
      
      - name: Download pipeline package
        run: |
          SHA=$(git rev-parse HEAD^2)
          CMD='gsutil ls gs://mitene-github-actions/pkg/'${SHA}
          if eval "$CMD"; then
            gsutil cp -r "gs://mitene-github-actions/pkg/"${SHA}"/*" ./
          fi
      
      - name: Deploy pipeline and run
        run: |
          targets=$(ls | grep pipeline.tar.gz || echo "")
          for target in $targets; do
              echo "**********************************************"
              echo "Deploy $target"
              echo "**********************************************"
              pipeline_name=$(basename $target .tar.gz)
              portry run python .github/workflows/helper.py deploy-pipeline \
                --package_path "$target" --pipeline_name "$pipeline_name" --github_sha "$GITHUB_SHA" \
                --is_master
          done
